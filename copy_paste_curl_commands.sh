#!/usr/bin/env bash
# Comandi cURL da copiare e incollare nell'ordine
# Sostituisci <HOST>, <SESSION_ID>, <MANUS_WEBHOOK_SECRET_REALE> con i tuoi valori

echo "ðŸ§ª COMANDI cURL DA COPIARE E INCOLLARE"
echo "======================================"
echo "Sostituisci <HOST>, <SESSION_ID>, <MANUS_WEBHOOK_SECRET_REALE> con i tuoi valori"
echo ""

echo "1) Health (GET + HEAD)"
echo "======================"
echo "curl -sS https://<HOST>/webhooks/manus/hooks/health"
echo "curl -sS -I https://<HOST>/webhooks/manus/hooks/health | head -n1"
echo "Atteso: body {\"status\":\"ok\"} e HTTP/1.1 200 OK."
echo ""

echo "2) Admin route senza auth (negativo)"
echo "===================================="
echo "curl -sS -X POST https://<HOST>/admin/manus/mapping/create \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d '{\"manus_user_id\":\"u_test\",\"syn_user_id\":42,\"email\":\"test@example.com\"}'"
echo "Atteso: 401/403 (ti conferma che la protezione c'Ã¨)."
echo ""

echo "3) Admin route con auth (positivo)"
echo "=================================="
echo "# usa Cookie di sessione OPPURE Bearer token"
echo "curl -sS -X POST https://<HOST>/admin/manus/mapping/create \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -H \"Cookie: session=<SESSION_ID>\" \\"
echo "  -d '{\"manus_user_id\":\"u_test\",\"syn_user_id\":42,\"email\":\"test@example.com\"}'"
echo ""
echo "curl -sS https://<HOST>/admin/manus/mapping/list \\"
echo "  -H \"Cookie: session=<SESSION_ID>\""
echo "Atteso: {\"ok\":true,...} e la riga u_test in lista."
echo ""

echo "4) Webhook con firma sbagliata (negativo)"
echo "========================================="
echo "BAD_SIG=deadbeef"
echo "BODY='{\"course_id\":\"COURSE123\",\"manus_user_id\":\"u_test\",\"email\":\"test@example.com\"}'"
echo "curl -sS -X POST https://<HOST>/webhooks/manus/hooks \\"
echo "  -H \"X-Manus-Event: COURSE_COMPLETED\" \\"
echo "  -H \"X-Manus-Signature: \$BAD_SIG\" \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d \"\$BODY\""
echo "Atteso: 401 (HMAC ok lato server)."
echo ""

echo "5) Webhook con firma corretta (positivo)"
echo "========================================"
echo "SECRET='<MANUS_WEBHOOK_SECRET_REALE>'"
echo "BODY='{\"course_id\":\"COURSE123\",\"manus_user_id\":\"u_test\",\"email\":\"test@example.com\"}'"
echo "SIG=\$(printf \"%s\" \"\$BODY\" | openssl dgst -sha256 -hmac \"\$SECRET\" -r | awk '{print \$1}')"
echo "curl -sS -X POST https://<HOST>/webhooks/manus/hooks \\"
echo "  -H \"X-Manus-Event: COURSE_COMPLETED\" \\"
echo "  -H \"X-Manus-Signature: \$SIG\" \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d \"\$BODY\""
echo "Atteso: {\"status\":\"ok\"}."
echo ""

echo "6) Coverage rebuild (verifica stato)"
echo "===================================="
echo "curl -sS -X POST https://<HOST>/admin/manus/coverage/rebuild/42 \\"
echo "  -H \"Cookie: session=<SESSION_ID>\""
echo "Atteso: {\"ok\":true,\"updated\":<n>} (>0 se esistono requisiti mappati)."
echo ""

echo "Extra micro-test utili"
echo "======================"
echo "# Idempotenza mapping: ripeti il test 3 (stesso manus_user_id) â†’ non deve creare duplicati (route fa upsert)."
echo "# Email utente sconosciuta nel webhook â†’ deve apparire un mapping inattivo \"da revisionare\"."
echo ""
echo "# Test webhook con utente sconosciuto:"
echo "BODY_UNKNOWN='{\"course_id\":\"COURSE456\",\"manus_user_id\":\"u_unknown\",\"email\":\"unknown@example.com\"}'"
echo "SIG_UNKNOWN=\$(printf \"%s\" \"\$BODY_UNKNOWN\" | openssl dgst -sha256 -hmac \"\$SECRET\" -r | awk '{print \$1}')"
echo "curl -sS -X POST https://<HOST>/webhooks/manus/hooks \\"
echo "  -H \"X-Manus-Event: COURSE_COMPLETED\" \\"
echo "  -H \"X-Manus-Signature: \$SIG_UNKNOWN\" \\"
echo "  -H \"Content-Type: application/json\" \\"
echo "  -d \"\$BODY_UNKNOWN\""
echo ""
echo "# Verifica mapping inattivo creato:"
echo "curl -sS https://<HOST>/admin/manus/mapping/list \\"
echo "  -H \"Cookie: session=<SESSION_ID>\""
echo ""
echo "ðŸ”§ TROUBLESHOOTING:"
echo "â€¢ 401/403 admin â†’ manca Cookie/Bearer"
echo "â€¢ 401 webhook â†’ secret/firma non combaciano"
echo "â€¢ 200 ma coverage invariato â†’ crea mapping â†’ rifai rebuild"
echo "â€¢ Timeout/504 â†’ riavvia Gunicorn e controlla log:"
echo "  journalctl -u gunicorn -n 100 --no-pager"
